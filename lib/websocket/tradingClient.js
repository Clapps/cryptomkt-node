const { AuthClient } = require("./authClient")

/**
 * TradingClient connects via websocket to cryptomarket to enable the user to manage orders. uses SHA256 as auth method and authenticates automatically.
 */
class TradingClient extends AuthClient {
    constructor(apiKey, apiSecret) {
        super(
            "wss://api.exchange.cryptomkt.com/api/2/ws/trading", 
            apiKey, 
            apiSecret, 
            {
                // reports
                "subscribeReports":"reports",
                "unsubscribeReports":"reports",
                "activeOrders":"reports",
                "report":"reports",
            }
        )
    }

    /**
     * Create a new order
     * 
     * https://api.exchange.cryptomkt.com/#place-new-order
     * 
     * @param {string} params.clientOrderId If given must be unique within the trading day, including all active orders. If not given, is generated by the server
     * @param {string} params.symbol Trading symbol
     * @param {string} params.side 'buy' or 'sell'
     * @param {string} params.quantity Order quantity
     * @param {string} [params.type] Optional. 'limit', 'market', 'stopLimit' or 'stopMarket'. Default is 'limit'
     * @param {string} [params.timeInForce] Optional. 'GTC', 'IOC', 'FOK', 'Day', 'GTD'
     * @param {string} [params.price] Required for 'limit' and 'stopLimit'. limit price of the order
     * @param {string} [params.stopPrice] Required for 'stopLimit' and 'stopMarket' orders. stop price of the order
     * @param {string} [params.expireTime] Required for orders with timeInForce = 'GDT'
     * @param {boolean} [params.strictValidate] Optional. If False, the server rounds half down for tickerSize and quantityIncrement. Example of ETHBTC: tickSize = '0.000001', then price '0.046016' is valid, '0.0460165' is invalid
     * @param {boolean} [params.postOnly] Optional. If True, your postOnly order causes a match with a pre-existing order as a taker, then the order will be cancelled
     * 
     * @return {Promise} A promise of the report of the newly created order
     */
    createOrder(params= {}) {
        this.checkDefined({'clientOrderId':params['clientOrderId'], 'symbol':params['symbol'], 'side':params['side'], 'quantity':params['quantity']})
        return this.sendById('newOrder', params)
    }

    /**
     * Cancel the order with ClientOrderId
     * 
     * https://api.exchange.cryptomkt.com/#cancel-order
     * 
     * @param {string} clientOrderId The client order id of the order to cancel
     * 
     * @return {Promise} A promise of the report of the canceled order
     */
    cancelOrder(clientOrderId) {
        this.checkDefined({clientOrderId})
        return this.sendById('cancelOrder', {clientOrderId})
    }

    /**
     * Rewrites an order, canceling it or replacing it
     * 
     * The Cancel/Replace request is used to change the parameters of an existing order and to change the quantity or price attribute of an open order
     * 
     * Do not use this request to cancel the quantity remaining in an outstanding order. Use the cancel_order for this purpose
     * 
     * It is stipulated that a newly entered order cancels a prior order that has been entered, but not yet executed
     * 
     * https://api.exchange.cryptomkt.com/#cancel-replace-order
     * 
     * @param {string} clientOrderId The client id of the order to modify
     * @param {string} requestClientId The new id for the modified order
     * @param {string} quantity The new quantity of the order
     * @param {string} price The new price of the order
     * @param {boolean} [strictValidate] Optional. If False, the server rounds half down for tickerSize and quantityIncrement. Example of ETHBTC: tickSize = '0.000001', then price '0.046016' is valid, '0.0460165' is invalid
     * 
     * @return {Promise} A promise of the report of the modified order
     */
    replaceOrder(clientOrderId, requestClientId, quantity, price, strictValidate) {
        let params = {clientOrderId, requestClientId, quantity, price}
        this.checkDefined(params)
        if (strictValidate !== undefined && strictValidate !== null) params['strictValidate'] = strictValidate
        return this.sendById('cancelReplaceOrder', params)
    }

    /**
     * Get the account active orders
     * 
     * https://api.exchange.cryptomkt.com/#get-active-orders-2
     * 
     * @return {Promise} A promise of the list of reports of the active orders
     */
    getActiveOrders() {
        return this.sendById('getOrders')
    }

    /**
     * Get the user trading balance
     * 
     * https://api.exchange.cryptomkt.com/#get-trading-balance
     * 
     * @return {Promise} A promise of the list of the user trading balance
     */
    getTradingBalance() {
        return this.sendById('getTradingBalance')
    }

    ///////////////////
    // subscriptions //
    ///////////////////

     /**
     * Subscribe to a feed of trading events of the account.
     * 
     * the first feed is a list of reporst of the active orders. the rest of the feeds are one report at a time
     * 
     * https://api.exchange.cryptomkt.com/#subscribe-to-reports
     * 
     * @param {function} callback A function to call with the result data. It takes one argument. a feed of reports
     * 
     * @return {Promise} A Promise of the reports of trading events of the account as feed for the callback
     */
    subscribeToReports(callback) {
        this.checkDefined({callback})
        return this.sendSubscription('subscribeReports', callback)
    }

}

module.exports = {
    TradingClient
}